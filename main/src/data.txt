# Extracted Code (.ts, .tsx, .css)
# Date and Time: 2025-07-09 09:41:25
# Files Included: 16

# === lib/utils.ts ===
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

# === lib/data.ts ===
export interface Book {
  id: string;
  title: string;
  author: string;
  price: number;
  imageUrl: string;
  category: string;
  isFeatured: boolean;
  description: string;
}

export const dummyBooks: Book[] = [
  {
    id: "1",
    title: "Quantum Physics for Beginners",
    author: "Dr. Wanjiku Mwangi",
    price: 3200,
    imageUrl: "https://images.unsplash.com/photo-1667312939934-60fc3bfa4ec0?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Nnx8Ym9va3N8ZW58MHx8MHx8fDA%3D",
    category: "Science",
    isFeatured: true,
    description: "An accessible introduction to the fascinating world of quantum mechanics."
  },
  {
    id: "2",
    title: "The Art of Python",
    author: "Brian Otieno",
    price: 4800,
    imageUrl: "https://images.unsplash.com/photo-1497633762265-9d179a990aa6?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8NHx8Ym9va3N8ZW58MHx8MHx8fDA%3D",
    category: "Technology",
    isFeatured: true,
    description: "Master the elegant and powerful Python programming language."
  },
  {
    id: "3",
    title: "History of Ancient Civilizations",
    author: "Prof. Achieng' Omondi",
    price: 3700,
    imageUrl: "https://images.unsplash.com/photo-1524578271613-d550eacf6090?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MjB8fGJvb2tzfGVufDB8fDB8fHww",
    category: "History",
    isFeatured: true,
    description: "A comprehensive survey of the world's greatest ancient empires."
  },
  {
    id: "4",
    title: "Fundamentals of Economics",
    author: "Grace Wairimu",
    price: 5500,
    imageUrl: "https://images.unsplash.com/photo-1732304720653-86e4fa903345?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8N3x8ZWNvbm9taWNzJTIwYm9va3N8ZW58MHx8MHx8fDA%3D",
    category: "Business",
    isFeatured: true,
    description: "Explore the core principles that drive modern economies."
  },
  {
    id: "5",
    title: "Introduction to Calculus",
    author: "Samuel Kiprotich",
    price: 6800,
    imageUrl: "https://images.unsplash.com/photo-1731983568664-9c1d8a87e7a2?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTJ8fGNhbGN1bHVzJTVDJTIwYm9va3N8ZW58MHx8MHx8fDA%3D",
    category: "Mathematics",
    isFeatured: false,
    description: "A rigorous yet clear guide to the concepts of limits, derivatives, and integrals."
  },
  {
    id: "6",
    title: "Modernist Literature",
    author: "Linda Naliaka",
    price: 3000,
    imageUrl: "https://images.unsplash.com/photo-1630852722952-5a87d3ca2d95?w=500&auto=format&fit=crop&q=60&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTV8fGxpdGVyYXR1cmUlMjBib29rc3xlbnwwfHwwfHx8MA%3D%3D",
    category: "Literature",
    isFeatured: false,
    description: "An analysis of the groundbreaking works of the early 20th century."
  },
];

export const dummyCategories = [
  { name: "Science", imageUrl: "https://placehold.co/600x400/00aaeb/ffffff" },
  { name: "Technology", imageUrl: "https://placehold.co/600x400/3871c1/ffffff" },
  { name: "History", imageUrl: "https://placehold.co/600x400/2e3192/ffffff" },
  { name: "Business", imageUrl: "https://placehold.co/600x400/2b2b2b/ffffff" },
  { name: "Mathematics", imageUrl: "https://placehold.co/600x400/00aaeb/ffffff" },
  { name: "Literature", imageUrl: "https://placehold.co/600x400/3871c1/ffffff" },
];

# === app/globals.css ===
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-sans);
  --font-display: var(--font-display);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.75rem;

  --background: #101118;
  --foreground: #ffffff;
  
  --card: #2b2b2b;
  --card-foreground: #ffffff;
  
  --popover: #1a1a1d;
  --popover-foreground: #ffffff;
  
  --primary: #00aaeb;
  --primary-foreground: #101118;
  
  --secondary: #3871c1;
  --secondary-foreground: #ffffff;
  
  --muted: #22242e;
  --muted-foreground: #a0a0b0;
  
  --accent: #3871c1;
  --accent-foreground: #ffffff;
  
  --destructive: oklch(0.58 0.24 27.32);
  
  --border: hsl(224, 23%, 20%);
  --input: hsl(224, 23%, 20%);
  --ring: #00aaeb;

  --color-brand-primary: #00aaeb;
  --color-brand-secondary: #3871c1;
  --color-brand-tertiary: #2e3192;
  --color-brand-text: #2b2b2b;

  --font-sans: var(--font-sans);
  --font-display: var(--font-display);
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground antialiased;
    background-color: var(--background);
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply font-display uppercase tracking-wider text-balance;
  }
}

.interactive-aurora {
  --x: 50%;
  --y: 50%;
  position: relative;
  background-color: var(--background);
}
.interactive-aurora::before {
  content: "";
  position: absolute;
  inset: 0;
  background-image: radial-gradient(
      circle at var(--x) var(--y),
      var(--color-brand-secondary),
      transparent 25%
    ),
    radial-gradient(
      circle at calc(100% - var(--x)) calc(100% - var(--y)),
      var(--color-brand-primary),
      transparent 25%
    ),
    radial-gradient(
      circle at calc(var(--x) / 2 + 10%) calc(var(--y) * 1.5 - 20%),
      var(--color-brand-tertiary),
      transparent 40%
    );
  filter: blur(80px);
  opacity: 0.5;
  transition: background-position 0.4s ease-out;
}

@keyframes animated-gradient {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

.bg-animated-gradient {
  background: linear-gradient(-45deg, var(--color-brand-tertiary), var(--color-brand-secondary), #101118, var(--color-brand-tertiary));
  background-size: 400% 400%;
  animation: animated-gradient 20s ease infinite;
}

.btn-shine {
  position: relative;
  overflow: hidden;
}
.btn-shine::after {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background-image: linear-gradient(
    120deg,
    rgba(255, 255, 255, 0) 30%,
    rgba(255, 255, 255, 0.25),
    rgba(255, 255, 255, 0) 70%
  );
  transform: rotate(25deg);
  opacity: 0;
  transition: opacity 0.5s ease;
}
.btn-shine:hover::after {
  opacity: 1;
  animation: shine 1.5s ease-in-out;
}
@keyframes shine {
  0% {
    top: 100%;
    left: 100%;
  }
  100% {
    top: -50%;
    left: -50%;
  }
}

.bg-dot-grid {
  background-image: radial-gradient(
    circle,
    oklch(1 0 0 / 0.05) 1px,
    transparent 1px
  );
  background-size: 2.5rem 2.5rem;
}

.link-underline {
  position: relative;
  padding-bottom: 4px;
}
.link-underline::after {
  content: '';
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 2px;
  background-color: var(--primary);
  transform: scaleX(0);
  transform-origin: right;
  transition: transform 0.4s cubic-bezier(0.22, 1, 0.36, 1);
}
.link-underline:hover::after {
  transform: scaleX(1);
  transform-origin: left;
}

# === app/layout.tsx ===
import type { Metadata } from "next";
import { Oswald, Inter } from "next/font/google";
import "./globals.css";
import { cn } from "@/lib/utils";
import { Header } from "@/components/layout/Header";
import { Footer } from "@/components/layout/Footer";
import { CartProvider } from "@/context/CartContext";
import { Toaster } from "@/components/ui/sonner";

const fontSans = Inter({
  subsets: ["latin"],
  weight: ["300", "400", "500", "600", "700"],
  variable: "--font-sans",
});

const fontDisplay = Oswald({
  subsets: ["latin"],
  weight: ["500", "600", "700"],
  variable: "--font-display",
});

export const metadata: Metadata = {
  title: "Doritex Publishing Investments",
  description: "Your Gateway to Educational Excellence",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={cn(
          "min-h-screen bg-background font-sans antialiased",
          fontSans.variable,
          fontDisplay.variable
        )}
      >
        <CartProvider>
          <div className="relative flex min-h-dvh flex-col bg-background">
            <Header />
            <main className="flex-1">{children}</main>
            <Footer />
          </div>
          <Toaster />
        </CartProvider>
      </body>
    </html>
  );
}

# === app/page.tsx ===
"use client";
import { Button } from "@/components/ui/button";
import { BookCard } from "@/components/shared/BookCard";
import { Book, dummyBooks, dummyCategories } from "@/lib/data";
import { ArrowRight, BookOpen, ChevronLeft, ChevronRight, Lightbulb, TrendingUp } from "lucide-react";
import Image from "next/image";
import Link from "next/link";
import { motion, Variants } from "framer-motion";
import { useEffect, useState } from "react";

const getRandomUniqueBooks = (source: Book[], count: number): Book[] => {
  const shuffled = [...source].sort(() => 0.5 - Math.random());
  return shuffled.slice(0, count);
};

const HeroBookCoverflow = ({ books, setBooks }: { books: Book[]; setBooks: React.Dispatch<React.SetStateAction<Book[]>> }) => {
  const activeIndex = books.length > 0 ? Math.floor(books.length / 2) : 0;

  useEffect(() => {
    const interval = setInterval(() => {
      setBooks((currentBooks) => {
        if (currentBooks.length < 2) return currentBooks;
        const [first, ...rest] = currentBooks;
        return [...rest, first];
      });
    }, 3000);
    return () => clearInterval(interval);
  }, [books.length, setBooks]);

  const handleNext = () => {
    setBooks((currentBooks) => {
      if (currentBooks.length < 2) return currentBooks;
      const [first, ...rest] = currentBooks;
      return [...rest, first];
    });
  };

  const handlePrev = () => {
    setBooks((currentBooks) => {
      if (currentBooks.length < 2) return currentBooks;
      const last = currentBooks[currentBooks.length - 1];
      const rest = currentBooks.slice(0, -1);
      return [last, ...rest];
    });
  };

  if (!books.length) return null;

  const activeBook = books[activeIndex];

  return (
    <div className="w-full h-full flex flex-col items-center justify-center gap-8">
      <div className="relative w-full h-80" style={{ perspective: "1200px" }}>
        {books.map((book, i) => {
          const offset = i - activeIndex;
          const isVisible = Math.abs(offset) <= 2;

          return (
            <motion.div
              key={book.id}
              className="absolute w-52 h-full top-0 left-1/2 -ml-28"
              initial={false}
              animate={{
                x: `${offset * 35}%`,
                scale: offset === 0 ? 1 : 0.75,
                rotateY: offset * -25,
                zIndex: books.length - Math.abs(offset),
                opacity: isVisible ? 1 : 0,
              }}
              transition={{ type: "spring", stiffness: 100, damping: 20 }}
            >
              <Link href={`/books/${book.id}`} className="cursor-pointer" tabIndex={-1}>
                <Image
                  src={book.imageUrl}
                  alt={book.title}
                  width={400}
                  height={600}
                  className="object-cover w-full h-full rounded-lg shadow-2xl shadow-black/50 pointer-events-none"
                />
              </Link>
            </motion.div>
          );
        })}
      </div>

      <div className="flex items-center gap-4">
        <Button 
            size="icon" 
            variant="outline" 
            className="rounded-full bg-background/50 backdrop-blur-sm"
            onClick={handlePrev}
        >
          <ChevronLeft className="h-6 w-6" />
        </Button>
        <div className="text-center w-64">
             <Link href={`/books/${activeBook?.id}`}>
                <motion.h3
                    key={activeBook?.id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="font-bold text-lg text-white/90 truncate"
                >
                    {activeBook?.title}
                </motion.h3>
            </Link>
            <p className="text-sm text-muted-foreground">{activeBook?.author}</p>
        </div>
        <Button 
            size="icon" 
            variant="outline" 
            className="rounded-full bg-background/50 backdrop-blur-sm"
            onClick={handleNext}
        >
          <ChevronRight className="h-6 w-6" />
        </Button>
      </div>
    </div>
  );
};

export default function HomePage() {
  const featuredBooks = dummyBooks.filter((book) => book.isFeatured);
  const [heroBooks, setHeroBooks] = useState<Book[]>([]);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
    setHeroBooks(getRandomUniqueBooks(dummyBooks, 7)); 
  }, []);

  const containerVariants: Variants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.1, delayChildren: 0.2 },
    },
  };

  const itemVariants: Variants = {
    hidden: { y: 30, opacity: 0 },
    visible: { y: 0, opacity: 1, transition: { type: "spring", stiffness: 100, damping: 15 } },
  };

  return (
    <div className="flex flex-col">
      <section id="interactive-hero" className="interactive-aurora w-full overflow-hidden relative">
        <div className="absolute inset-0 opacity-20 bg-dot-grid -z-10"></div>
        <div className="container relative z-10 mx-auto min-h-[90vh] grid lg:grid-cols-2 items-center px-4 gap-12">
          
          <div className="text-center lg:text-left">
            <motion.h1
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, ease: [0.22, 1, 0.36, 1] }}
              className="text-5xl font-bold tracking-tighter text-white md:text-7xl lg:text-8xl"
            >
              Gateway to <span className="text-primary">Educational</span> Excellence.
            </motion.h1>
            <motion.p
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.2, ease: [0.22, 1, 0.36, 1] }}
              className="mt-6 text-lg text-white/80 md:text-xl max-w-2xl mx-auto lg:mx-0 font-sans"
            >
              Discover a curated collection of academic and professional publications designed to empower your learning journey and fuel your growth.
            </motion.p>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8, delay: 0.4, ease: [0.22, 1, 0.36, 1] }}
              className="mt-10"
            >
              <Button size="lg" asChild className="bg-primary hover:bg-primary/90 text-primary-foreground font-bold text-base h-14 px-8 rounded-full shadow-lg shadow-primary/20 btn-shine">
                <Link href="/books">
                  Explore Collection <ArrowRight className="ml-2 h-5 w-5" />
                </Link>
              </Button>
            </motion.div>
          </div>
          
          <div className="w-full h-[30rem] hidden lg:flex items-center justify-center">
            {isMounted && <HeroBookCoverflow books={heroBooks} setBooks={setHeroBooks} />}
          </div>

        </div>
      </section>

      <section className="py-24 md:py-32 relative">
        <div className="absolute inset-0 -z-10 bg-dot-grid [mask-image:linear-gradient(to_bottom,white,transparent)]"></div>
        <div className="container mx-auto px-4">
          <h2 className="text-4xl md:text-5xl font-bold tracking-tighter text-center mb-4 text-foreground">
            Featured Publications
          </h2>
          <p className="text-center text-muted-foreground text-lg mb-20 max-w-2xl mx-auto font-sans">
            Handpicked selections from our experts to kickstart your intellectual adventure.
          </p>
          <motion.div
            className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-x-8 gap-y-12"
            variants={containerVariants}
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.1 }}
          >
            {featuredBooks.map((book) => (
              <motion.div key={book.id} variants={itemVariants}>
                <BookCard book={book} />
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>

      <section id="categories" className="py-24 md:py-32 bg-secondary/5 relative overflow-hidden">
        <div className="absolute inset-0 opacity-20 bg-dot-grid"></div>
        <div className="container mx-auto px-4 relative">
          <h2 className="text-4xl md:text-5xl font-bold tracking-tighter text-center mb-20 text-foreground">
            Browse By Category
          </h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
            {dummyCategories.map((category, i) => (
              <motion.div
                key={category.name}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: i * 0.05, ease: "easeOut" }}
                viewport={{ once: true }}
              >
                <Link href="#" className="block group relative overflow-hidden rounded-2xl shadow-lg">
                  <div className="absolute inset-0 overflow-hidden rounded-2xl">
                    <Image
                      src={category.imageUrl}
                      alt={category.name}
                      width={600}
                      height={400}
                      className="object-cover w-full h-full transition-transform duration-700 ease-out group-hover:scale-110"
                    />
                  </div>
                  <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent group-hover:from-black/90 transition-all duration-500"></div>
                  <div className="relative h-80 p-6 flex flex-col justify-end">
                    <h3 className="text-3xl font-bold text-white drop-shadow-md transition-transform duration-500 group-hover:-translate-y-2">
                      {category.name}
                    </h3>
                  </div>
                </Link>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      <section id="about" className="py-24 md:py-32 text-white overflow-hidden relative bg-animated-gradient">
        <div
          className="absolute inset-0 opacity-5"
          style={{ backgroundImage: `url('https://www.transparenttextures.com/patterns/subtle-prism.png')` }}
        ></div>
        <div className="container mx-auto text-center px-4 relative">
          <h2 className="text-4xl md:text-5xl font-bold tracking-tighter mb-6">
            Our Mission: Empowering Minds
          </h2>
          <p className="max-w-3xl mx-auto text-lg text-white/70 leading-relaxed mb-20 font-sans">
            At Doritex, we believe in the transformative power of knowledge. Our mission is to provide high-quality, accessible educational resources that inspire curiosity and empower individuals to achieve their goals.
          </p>
          <motion.div
            className="grid grid-cols-1 md:grid-cols-3 gap-8"
            variants={containerVariants}
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true }}
          >
            {[
              { icon: BookOpen, title: "Vast Collection", desc: "Explore a diverse range of subjects and authors." },
              { icon: Lightbulb, title: "Quality Content", desc: "Carefully curated and peer-reviewed publications." },
              { icon: TrendingUp, title: "Continuous Growth", desc: "Supporting your lifelong learning journey." },
            ].map((item) => (
              <motion.div
                key={item.title}
                variants={itemVariants}
                className="bg-white/10 p-8 rounded-2xl border border-white/10 shadow-lg backdrop-blur-md transition-all duration-300 hover:bg-white/20 hover:border-primary hover:-translate-y-2 hover:shadow-primary/20"
              >
                <div className="mb-5 inline-block rounded-full bg-white/10 p-4">
                  <item.icon className="h-10 w-10 text-primary" />
                </div>
                <h3 className="text-2xl font-bold mb-2 text-white">{item.title}</h3>
                <p className="text-sm text-white/60 font-sans">{item.desc}</p>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>
    </div>
  );
}

# === app/cart/page.tsx ===
"use client";

import { useCart } from "@/context/CartContext";
import { Button } from "@/components/ui/button";
import Image from "next/image";
import Link from "next/link";
import { Minus, Plus, Trash2, ArrowRight } from "lucide-react";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";

export default function CartPage() {
  const { state, dispatch } = useCart();
  const { items } = state;

  const updateQuantity = (id: string, quantity: number) => {
    dispatch({ type: 'UPDATE_QUANTITY', payload: { id, quantity } });
  };
  
  const removeItem = (id: string) => {
    dispatch({ type: 'REMOVE_ITEM', payload: { id } });
  };

  const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);
  const shipping = subtotal > 0 ? 5.00 : 0;
  const total = subtotal + shipping;

  return (
    <div className="container mx-auto px-4 py-16 md:py-24">
      <h1 className="text-4xl md:text-5xl font-bold tracking-tighter mb-12">Shopping Cart</h1>
      
      {items.length === 0 ? (
        <div className="text-center py-20 bg-muted/30 rounded-lg">
          <h2 className="text-2xl font-semibold mb-4">Your cart is empty.</h2>
          <p className="text-muted-foreground mb-8">
  Looks like you haven&apos;t added any books yet.
</p>

          <Button asChild size="lg" className="bg-primary hover:bg-primary/90 text-primary-foreground font-bold text-base h-14 px-8 rounded-full shadow-lg shadow-primary/20 btn-shine">
            <Link href="/books">Explore Books</Link>
          </Button>
        </div>
      ) : (
        <div className="grid lg:grid-cols-3 gap-12">
          <div className="lg:col-span-2 space-y-6">
            {items.map(item => (
              <Card key={item.id} className="flex items-center p-4 bg-card/80 border-white/10">
                <Image src={item.imageUrl} alt={item.title} width={100} height={150} className="rounded-md object-cover" />
                <div className="flex-grow ml-6">
                  <h3 className="text-lg font-bold">{item.title}</h3>
                  <p className="text-sm text-muted-foreground">by {item.author}</p>
                  <p className="text-lg font-bold text-primary mt-2">Kshs {item.price.toFixed(2)}</p>
                </div>
                <div className="flex items-center gap-4">
                  <div className="flex items-center border border-input rounded-full p-1">
                    <Button variant="ghost" size="icon" className="rounded-full h-8 w-8" onClick={() => updateQuantity(item.id, item.quantity - 1)}>
                        <Minus className="h-4 w-4" />
                    </Button>
                    <span className="w-8 text-center font-bold">{item.quantity}</span>
                    <Button variant="ghost" size="icon" className="rounded-full h-8 w-8" onClick={() => updateQuantity(item.id, item.quantity + 1)}>
                        <Plus className="h-4 w-4" />
                    </Button>
                  </div>
                   <Button variant="ghost" size="icon" className="text-muted-foreground hover:text-destructive" onClick={() => removeItem(item.id)}>
                    <Trash2 className="h-5 w-5" />
                  </Button>
                </div>
              </Card>
            ))}
          </div>

          <div className="lg:col-span-1">
            <Card className="bg-card/80 backdrop-blur-sm border-white/10 shadow-xl shadow-black/20 sticky top-28">
              <CardHeader>
                <CardTitle className="text-2xl">Order Summary</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 text-lg">
                <div className="flex justify-between text-muted-foreground"><span>Subtotal</span><span>Kshs {subtotal.toFixed(2)}</span></div>
                <div className="flex justify-between text-muted-foreground"><span>Shipping</span><span>Kshs {shipping.toFixed(2)}</span></div>
                <hr className="border-border" />
                <div className="flex justify-between font-bold text-xl"><span>Total</span><span>Kshs {total.toFixed(2)}</span></div>
              </CardContent>
              <CardFooter>
                 <Button asChild size="lg" className="w-full bg-primary hover:bg-primary/90 text-primary-foreground font-bold text-base h-14 rounded-full shadow-lg shadow-primary/20 btn-shine">
                    <Link href="/checkout">
                        Proceed to Checkout <ArrowRight className="ml-2 h-5 w-5" />
                    </Link>
                 </Button>
              </CardFooter>
            </Card>
          </div>
        </div>
      )}
    </div>
  );
}

# === app/login/page.tsx ===
"use client"
import Link from "next/link"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

export default function LoginPage() {
  return (
    <div className="min-h-[80vh] flex items-center justify-center p-4 bg-dot-grid">
      <motion.div
        className="w-full max-w-xl"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, ease: "easeOut" }}
      >
        <Card className="w-full bg-card/80 backdrop-blur-sm border-white/10 shadow-2xl shadow-black/30">
          <CardHeader className="text-center">
            <CardTitle className="text-3xl font-bold">Welcome Back</CardTitle>
            <CardDescription className="text-muted-foreground pt-2">
              Sign in to continue your journey.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input id="email" type="email" placeholder="you@example.com" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input id="password" type="password" />
            </div>
          </CardContent>
          <CardFooter className="flex flex-col gap-4">
            <Button className="w-full h-12 bg-primary hover:bg-primary/90 text-primary-foreground font-bold btn-shine">Login</Button>
            <p className="text-sm text-muted-foreground">
                Don&apos;t have an account?{" "}
                <Link href="/register" className="font-semibold text-primary hover:underline">
                    Sign up
                </Link>
                </p>


          </CardFooter>
        </Card>
      </motion.div>
    </div>
  )
}

# === app/books/page.tsx ===
"use client";

import { useState } from 'react';
import { motion } from 'framer-motion';
import { BookCard } from '@/components/shared/BookCard';
import { dummyBooks } from '@/lib/data';
import { Input } from '@/components/ui/input';
import { Search } from 'lucide-react';

export default function BooksPage() {
  const [searchTerm, setSearchTerm] = useState('');

  const filteredBooks = dummyBooks.filter(book => 
    book.title.toLowerCase().includes(searchTerm.toLowerCase()) || 
    book.author.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.07, delayChildren: 0.2 },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: { y: 0, opacity: 1 },
  };

  return (
    <div className="relative">
      <div className="absolute inset-0 -z-10 bg-dot-grid [mask-image:linear-gradient(to_bottom,white,transparent_80%)]"></div>
      <section className="py-24 md:py-32">
        <div className="container mx-auto px-4">
          <motion.div
            initial={{ opacity: 0, y: -30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.7, ease: "easeOut" }}
          >
            <h1 className="text-5xl md:text-6xl font-bold tracking-tighter text-center text-foreground">
              Our Collection
            </h1>
            <p className="text-center text-muted-foreground text-lg mt-4 mb-12 max-w-2xl mx-auto font-sans">
              Search and explore our full range of publications. Your next great read is just a click away.
            </p>
            <div className="max-w-xl mx-auto mb-20 relative">
              <Search className="absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
              <Input 
                placeholder="Search by title or author..."
                className="pl-12 h-14 text-lg"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </motion.div>
          
          <motion.div
            className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-x-8 gap-y-12"
            variants={containerVariants}
            initial="hidden"
            animate="visible"
          >
            {filteredBooks.map((book) => (
              <motion.div key={book.id} variants={itemVariants}>
                <BookCard book={book} />
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>
    </div>
  );
}

# === app/books/[id]/page.tsx ===
"use client";

import { useParams } from 'next/navigation';
import { dummyBooks } from '@/lib/data';
import Image from 'next/image';
import { Button } from '@/components/ui/button';
import { ArrowLeft, ShoppingCart, Minus, Plus } from 'lucide-react';
import { useCart } from '@/context/CartContext';
import { useState } from 'react';
import Link from 'next/link';
import { toast } from 'sonner';

export default function BookDetailPage() {
  const params = useParams();
  const book = dummyBooks.find(b => b.id === params.id);
  const { dispatch } = useCart();
  const [quantity, setQuantity] = useState(1);

  if (!book) {
    return <div className="container py-20 text-center">Book not found.</div>;
  }
  
  const handleAddToCart = () => {
    for(let i = 0; i < quantity; i++) {
        dispatch({ type: 'ADD_ITEM', payload: book });
    }
    toast.success(`${quantity} x ${book.title} added to cart!`);
  }

  return (
    <div className="bg-background relative">
      <div className="absolute inset-0 -z-10 bg-dot-grid [mask-image:radial-gradient(ellipse_at_center,white_20%,transparent_70%)] opacity-30"></div>
      <div className="container mx-auto px-4 py-16 md:py-24">
        <div className="mb-12">
            <Button variant="ghost" asChild>
                <Link href="/books">
                    <ArrowLeft className="mr-2 h-4 w-4" />
                    Back to Collection
                </Link>
            </Button>
        </div>
        <div className="grid md:grid-cols-2 gap-12 lg:gap-20 items-start">
            <div className="relative shadow-2xl shadow-black/50 rounded-lg overflow-hidden">
                <Image
                    src={book.imageUrl}
                    alt={book.title}
                    width={800}
                    height={1200}
                    className="w-full h-auto object-cover"
                />
            </div>
            <div className="flex flex-col">
                <p className="text-sm font-semibold uppercase tracking-wider text-primary mb-2 font-sans">
                  {book.category}
                </p>
                <h1 className="text-4xl lg:text-5xl font-bold tracking-tighter text-white mb-3">
                    {book.title}
                </h1>
                <p className="text-xl text-muted-foreground mb-6 font-sans">by {book.author}</p>
                <p className="text-4xl font-bold text-foreground mb-8 font-sans">
                    Kshs {book.price.toFixed(2)}
                </p>
                <p className="text-foreground/80 leading-relaxed font-sans mb-10">
                    {book.description}
                </p>
                
                <div className="flex items-center gap-4 mb-8">
                    <div className="flex items-center border border-input rounded-full p-1">
                        <Button variant="ghost" size="icon" className="rounded-full" onClick={() => setQuantity(q => Math.max(1, q - 1))}>
                            <Minus className="h-4 w-4" />
                        </Button>
                        <span className="w-12 text-center text-lg font-bold">{quantity}</span>
                        <Button variant="ghost" size="icon" className="rounded-full" onClick={() => setQuantity(q => q + 1)}>
                            <Plus className="h-4 w-4" />
                        </Button>
                    </div>
                    <Button size="lg" className="flex-grow bg-primary hover:bg-primary/90 text-primary-foreground font-bold text-base h-14 rounded-full shadow-lg shadow-primary/20 btn-shine" onClick={handleAddToCart}>
                        <ShoppingCart className="mr-2 h-5 w-5" />
                        Add to Cart
                    </Button>
                </div>
            </div>
        </div>
      </div>
    </div>
  );
}

# === app/register/page.tsx ===
"use client"
import Link from "next/link"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

export default function RegisterPage() {
  return (
    <div className="min-h-[80vh] flex items-center justify-center p-4 bg-dot-grid">
      <motion.div
        className="w-full max-w-xl"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, ease: "easeOut" }}
      >
        <Card className="w-full bg-card/80 backdrop-blur-sm border-white/10 shadow-2xl shadow-black/30">
          <CardHeader className="text-center">
            <CardTitle className="text-3xl font-bold">Create Account</CardTitle>
            <CardDescription className="text-muted-foreground pt-2">
              Begin your educational journey with us.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
                <Label htmlFor="name">Full Name</Label>
                <Input id="name" placeholder="John Doe" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input id="email" type="email" placeholder="you@example.com" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input id="password" type="password" />
            </div>
          </CardContent>
          <CardFooter className="flex flex-col gap-4">
            <Button className="w-full h-12 bg-primary hover:bg-primary/90 text-primary-foreground font-bold btn-shine">Create Account</Button>
            <p className="text-sm text-muted-foreground">
              Already have an account?{" "}
              <Link href="/login" className="font-semibold text-primary hover:underline">
                Login
              </Link>
            </p>
          </CardFooter>
        </Card>
      </motion.div>
    </div>
  )
}

# === app/order/confirmation/page.tsx ===
"use client"
import Link from "next/link"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { CheckCircle } from "lucide-react"

export default function OrderConfirmationPage() {
  return (
    <div className="min-h-[80vh] flex items-center justify-center p-4 text-center bg-dot-grid">
      <motion.div
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.5, type: "spring" }}
        className="bg-card/50 backdrop-blur-md p-10 md:p-16 rounded-2xl border border-white/10 shadow-2xl shadow-black/30"
      >
        <CheckCircle className="h-20 w-20 text-primary mx-auto mb-6" />
        <h1 className="text-4xl md:text-5xl font-bold tracking-tighter mb-4">
          Thank You For Your Order!
        </h1>
        <p className="text-lg text-muted-foreground max-w-lg mx-auto mb-10">
          Your order has been placed successfully. You will receive a confirmation email shortly with the order details.
        </p>
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button asChild size="lg" className="bg-primary hover:bg-primary/90 text-primary-foreground font-bold text-base h-14 px-8 rounded-full shadow-lg shadow-primary/20 btn-shine">
                <Link href="/books">Continue Shopping</Link>
            </Button>
            <Button asChild variant="outline" size="lg" className="h-14 px-8 rounded-full text-base font-bold">
                <Link href="/profile/orders">View Order History</Link>
            </Button>
        </div>
      </motion.div>
    </div>
  )
}

# === app/checkout/page.tsx ===
"use client"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useCart } from "@/context/CartContext"
import Image from "next/image"
import { useRouter } from "next/navigation"

export default function CheckoutPage() {
  const { state } = useCart()
  const router = useRouter()
  const { items } = state

  const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0)
  const shipping = subtotal > 0 ? 5.00 : 0
  const total = subtotal + shipping

  const handlePlaceOrder = (e: React.FormEvent) => {
    e.preventDefault();
    router.push('/order/confirmation');
  }

  return (
    <div className="container mx-auto px-4 py-16 md:py-24">
      <h1 className="text-4xl md:text-5xl font-bold tracking-tighter mb-12">Checkout</h1>
      <form onSubmit={handlePlaceOrder} className="grid lg:grid-cols-3 gap-12">
        <div className="lg:col-span-2 space-y-10">
          <Card className="bg-card/80 border-white/10">
            <CardHeader><CardTitle className="text-2xl">Shipping & Delivery</CardTitle></CardHeader>
            <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2"><Label htmlFor="name">Full Name</Label><Input id="name" required /></div>
              <div className="space-y-2"><Label htmlFor="email">Email</Label><Input id="email" type="email" required /></div>
              <div className="col-span-full space-y-2"><Label htmlFor="address">Address</Label><Input id="address" required /></div>
              <div className="space-y-2"><Label htmlFor="city">City</Label><Input id="city" required /></div>
              <div className="space-y-2"><Label htmlFor="zip">ZIP Code</Label><Input id="zip" required /></div>
            </CardContent>
          </Card>
          <Card className="bg-card/80 border-white/10">
            <CardHeader><CardTitle className="text-2xl">M-Pesa Payment</CardTitle></CardHeader>
            <CardContent className="space-y-4">
                <p className="text-muted-foreground text-sm">You will receive an STK Push on your phone to complete the payment.</p>
                <div className="space-y-2">
                    <Label htmlFor="phone">M-Pesa Phone Number</Label>
                    <Input id="phone" placeholder="e.g. 0712345678" required />
                </div>
            </CardContent>
          </Card>
        </div>

        <div className="lg:col-span-1">
          <Card className="bg-card/80 border-white/10 sticky top-28">
            <CardHeader><CardTitle className="text-2xl">Order Summary</CardTitle></CardHeader>
            <CardContent>
              <div className="space-y-4 mb-6">
                {items.map(item => (
                  <div key={item.id} className="flex items-center justify-between text-sm">
                    <div className="flex items-center gap-3">
                        <Image src={item.imageUrl} alt={item.title} width={40} height={60} className="rounded" />
                        <div>
                            <p className="font-semibold">{item.title}</p>
                            <p className="text-muted-foreground">Qty: {item.quantity}</p>
                        </div>
                    </div>
                    <p className="font-semibold">Kshs {(item.price * item.quantity).toFixed(2)}</p>
                  </div>
                ))}
              </div>
              <div className="space-y-2 text-md border-t border-border pt-4">
                <div className="flex justify-between text-muted-foreground"><span>Subtotal</span><span>Kshs {subtotal.toFixed(2)}</span></div>
                <div className="flex justify-between text-muted-foreground"><span>Shipping</span><span>Kshs {shipping.toFixed(2)}</span></div>
                <div className="flex justify-between font-bold text-xl mt-2"><span>Total</span><span>Kshs {total.toFixed(2)}</span></div>
              </div>
            </CardContent>
          </Card>
          <Button type="submit" size="lg" className="w-full mt-8 bg-primary hover:bg-primary/90 text-primary-foreground font-bold text-base h-14 rounded-full shadow-lg shadow-primary/20 btn-shine">
            Place Order
          </Button>
        </div>
      </form>
    </div>
  )
}

# === context/CartContext.tsx ===
"use client";

import { Book } from "@/lib/data";
import React, { createContext, useContext, useReducer, ReactNode } from "react";

interface CartItem extends Book {
  quantity: number;
}

type CartState = {
  items: CartItem[];
};

type CartAction =
  | { type: "ADD_ITEM"; payload: Book }
  | { type: "REMOVE_ITEM"; payload: { id: string } }
  | { type: "UPDATE_QUANTITY"; payload: { id: string; quantity: number } };

const initialState: CartState = {
  items: [],
};

const CartContext = createContext<{
  state: CartState;
  dispatch: React.Dispatch<CartAction>;
}>({
  state: initialState,
  dispatch: () => null,
});

const cartReducer = (state: CartState, action: CartAction): CartState => {
  switch (action.type) {
    case "ADD_ITEM": {
      const existingItem = state.items.find(item => item.id === action.payload.id);
      if (existingItem) {
        return {
          ...state,
          items: state.items.map(item =>
            item.id === action.payload.id
              ? { ...item, quantity: item.quantity + 1 }
              : item
          ),
        };
      }
      return {
        ...state,
        items: [...state.items, { ...action.payload, quantity: 1 }],
      };
    }
    case "REMOVE_ITEM": {
      return {
        ...state,
        items: state.items.filter(item => item.id !== action.payload.id),
      };
    }
    case "UPDATE_QUANTITY": {
      return {
        ...state,
        items: state.items.map(item =>
          item.id === action.payload.id
            ? { ...item, quantity: action.payload.quantity }
            : item
        ).filter(item => item.quantity > 0),
      };
    }
    default:
      return state;
  }
};

export const CartProvider = ({ children }: { children: ReactNode }) => {
  const [state, dispatch] = useReducer(cartReducer, initialState);

  return (
    <CartContext.Provider value={{ state, dispatch }}>
      {children}
    </CartContext.Provider>
  );
};

export const useCart = () => useContext(CartContext);

# === components/shared/BookCard.tsx ===
import React, { useRef, useState, useEffect } from 'react';
import Image from "next/image";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Book } from "@/lib/data";
import { useCart } from "@/context/CartContext";
import { Eye, ShoppingCart } from "lucide-react";
import { motion, useMotionValue, useSpring, useTransform } from "framer-motion";
import { toast } from "sonner";

interface BookCardProps {
  book: Book;
}

const StaticCard = ({ book }: BookCardProps) => (
  <div className="relative h-full">
    <Link href={`/books/${book.id}`} className="block h-full">
      <div className="p-px bg-gradient-to-br from-white/10 to-transparent rounded-xl h-full group transition-all duration-300 hover:from-primary/50 hover:to-secondary/50">
        <Card className="flex h-full flex-col overflow-hidden rounded-lg bg-card border-none relative">
          <CardHeader className="p-0 relative">
            <div className="aspect-[3/4] w-full overflow-hidden">
              <Image
                src={book.imageUrl}
                alt={book.title}
                width={400}
                height={600}
                className="object-cover w-full h-full transition-transform duration-300 group-hover:scale-105"
              />
            </div>
          </CardHeader>
          <CardContent className="flex-grow p-5 flex flex-col relative z-0 bg-card">
            <p className="text-xs font-semibold uppercase tracking-wider text-primary mb-1 font-sans">{book.category}</p>
            <CardTitle className="text-lg font-bold leading-snug mb-2 text-foreground/90 flex-grow">{book.title}</CardTitle>
            <p className="text-sm text-muted-foreground font-sans">by {book.author}</p>
          </CardContent>
          <CardFooter className="flex justify-between items-center p-5 pt-3 bg-card/80">
            <p className="text-xl font-bold text-foreground font-sans">Kshs {book.price.toFixed(2)}</p>
          </CardFooter>
        </Card>
      </div>
    </Link>
  </div>
);

export function BookCard({ book }: BookCardProps) {
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  const cardRef = useRef<HTMLDivElement>(null);
  const { dispatch } = useCart();

  const handleAddToCart = (e: React.MouseEvent) => {
    e.preventDefault();
    dispatch({ type: "ADD_ITEM", payload: book });
    toast.success(`${book.title} added to cart!`);
  };

  const mouseX = useMotionValue(0);
  const mouseY = useMotionValue(0);

  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {
    if (!cardRef.current) return;
    const { left, top, width, height } = cardRef.current.getBoundingClientRect();
    const x = e.clientX - left - width / 2;
    const y = e.clientY - top - height / 2;
    mouseX.set(x);
    mouseY.set(y);
  };
  
  const handleMouseLeave = () => {
    mouseX.set(0);
    mouseY.set(0);
  };

  const springConfig = { stiffness: 300, damping: 20 };
  const springX = useSpring(mouseX, springConfig);
  const springY = useSpring(mouseY, springConfig);

  const rotateX = useTransform(springY, [-150, 150], [-10, 10]);
  const rotateY = useTransform(springX, [-150, 150], [10, -10]);
  const glareX = useTransform(mouseX, [-150, 150], [-50, 150]);
  const glareY = useTransform(mouseY, [-150, 150], [-50, 150]);

  if (!isMounted) {
    return <StaticCard book={book} />;
  }
  
  return (
    <motion.div
        ref={cardRef}
        onMouseMove={handleMouseMove}
        onMouseLeave={handleMouseLeave}
        style={{
            rotateX,
            rotateY,
            transformStyle: "preserve-3d",
            perspective: '1000px'
        }}
        className="relative h-full"
    >
      <Link href={`/books/${book.id}`} className="block h-full" tabIndex={0}>
        <div className="p-px bg-gradient-to-br from-white/10 to-transparent rounded-xl h-full group transition-all duration-300 hover:from-primary/50 hover:to-secondary/50 preserve-3d">
          <Card
            style={{ transform: "translateZ(40px)" }} 
            className="flex h-full flex-col overflow-hidden rounded-lg bg-card border-none relative preserve-3d"
          >
            <motion.div
              style={{
                  x: glareX,
                  y: glareY,
                  background: "radial-gradient(circle at center, rgba(255,255,255,0.2) 0%, rgba(255,255,255,0) 50%)"
              }}
              className="absolute top-0 left-0 w-48 h-48 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none z-20"
             />
            <CardHeader className="p-0 relative z-10" style={{ transform: "translateZ(50px)" }}>
              <div className="aspect-[3/4] w-full overflow-hidden">
                <Image
                  src={book.imageUrl}
                  alt={book.title}
                  width={400}
                  height={600}
                  className="object-cover w-full h-full transition-transform duration-300 group-hover:scale-105"
                />
              </div>
              <div className="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center gap-4">
                   <Button
                      size="icon"
                      variant="outline"
                      className="bg-background/50 hover:bg-background border-border hover:border-primary backdrop-blur-sm rounded-full h-12 w-12"
                      tabIndex={-1} 
                   >
                      <Eye className="h-5 w-5" />
                   </Button>
                   <Button
                      size="icon"
                      className="bg-primary hover:bg-primary/90 text-primary-foreground rounded-full h-12 w-12 shadow-lg shadow-primary/30"
                      onClick={handleAddToCart}
                   >
                      <ShoppingCart className="h-5 w-5" />
                   </Button>
              </div>
            </CardHeader>
            <CardContent className="flex-grow p-5 flex flex-col relative z-0 bg-card">
              <p className="text-xs font-semibold uppercase tracking-wider text-primary mb-1 font-sans">{book.category}</p>

              <CardTitle className="text-lg font-bold leading-snug mb-2 text-foreground/90 flex-grow">{book.title}</CardTitle>
              <p className="text-sm text-muted-foreground font-sans">by {book.author}</p>
            </CardContent>
            <CardFooter className="flex justify-between items-center p-5 pt-3 bg-card/80">
              <p className="text-xl font-bold text-foreground font-sans">Kshs {book.price.toFixed(2)}</p>
            </CardFooter>
          </Card>
        </div>
      </Link>
    </motion.div>
  );
}

# === components/layout/Footer.tsx ===
import Link from "next/link";
import { Twitter, Facebook, Linkedin } from "lucide-react";

export function Footer() {
  return (
    <footer className="bg-[#0D0E13] text-muted-foreground relative overflow-hidden border-t border-white/5">
      <div className="absolute inset-0 opacity-[0.02] bg-dot-grid"></div>
      <div className="container mx-auto relative py-16 px-4">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-12 text-center md:text-left max-w-5xl mx-auto">
          <div className="md:col-span-1">
            <Link href="/" className="inline-block text-2xl font-bold font-display uppercase tracking-widest text-primary">
              Doritex
            </Link>
            <p className="text-sm leading-relaxed mt-4 font-sans max-w-xs mx-auto md:mx-0">
              Your Gateway to Educational Excellence.
            </p>
          </div>
          <div>
            <h4 className="font-bold text-base mb-4 text-foreground/80 font-display uppercase tracking-wider">
              Links
            </h4>
            <ul className="space-y-3 text-sm font-sans">
              <li><Link href="/" className="hover:text-primary transition-colors">Home</Link></li>
              <li><Link href="/books" className="hover:text-primary transition-colors">Books</Link></li>
              <li><Link href="/#about" className="hover:text-primary transition-colors">About Us</Link></li>
            </ul>
          </div>
          <div>
            <h4 className="font-bold text-base mb-4 text-foreground/80 font-display uppercase tracking-wider">
              Contact
            </h4>
            <ul className="space-y-3 text-sm font-sans">
              <li><a href="mailto:investments.doritex@gmail.com" className="hover:text-primary transition-colors">investments.doritex@gmail.com</a></li>
              <li><a href="tel: +254 722 316 210" className="hover:text-primary transition-colors">+254 722 316 210</a></li>
            </ul>
          </div>
          <div>
            <h4 className="font-bold text-base mb-4 text-foreground/80 font-display uppercase tracking-wider">
              Connect
            </h4>
            <div className="flex space-x-4 justify-center md:justify-start">
              <Link href="#" className="hover:text-primary hover:scale-110 transition-all"><Twitter size={22} /></Link>
              <Link href="#" className="hover:text-primary hover:scale-110 transition-all"><Facebook size={22} /></Link>
              <Link href="#" className="hover:text-primary hover:scale-110 transition-all"><Linkedin size={22} /></Link>
            </div>
          </div>
        </div>
        <div className="mt-16 pt-8 border-t border-white/10 text-center text-sm text-muted-foreground/60 font-sans">
          <p>© {new Date().getFullYear()} Doritex Investments Limited. All Rights Reserved.</p>
          <p className="mt-2">Created by <Link href="https://izziedevs.com" target="_blank" rel="noopener noreferrer" className="hover:text-primary transition-colors">IzzieDevs</Link></p>
        </div>
      </div>
    </footer>
  );
}

# === components/layout/Header.tsx ===
"use client";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import {
  Sheet,
  SheetContent,
  SheetTrigger,
  SheetHeader,
  SheetTitle,
  SheetDescription,
} from "@/components/ui/sheet";
import { Menu, ShoppingCart } from "lucide-react";
import { useEffect, useState } from "react";
import { cn } from "@/lib/utils";
import { useCart } from "@/context/CartContext";

const navLinks = [
  { href: "/", label: "Home" },
  { href: "/books", label: "Books" },
  { href: "/#categories", label: "Categories" },
  { href: "/#about", label: "About" },
];

export function Header() {
  const [isOpen, setIsOpen] = useState(false);
  const [hasScrolled, setHasScrolled] = useState(false);
  const { state } = useCart();
  const cartItemCount = state.items.reduce(
    (sum, item) => sum + item.quantity,
    0
  );

  useEffect(() => {
    const handleScroll = () => {
      setHasScrolled(window.scrollY > 20);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const BrandLogo = () => (
    <Link href="/" className="flex items-center gap-2 group" onClick={() => isOpen && setIsOpen(false)}>
      <span className="text-2xl font-bold font-display uppercase tracking-widest text-primary">
        Doritex
      </span>
    </Link>
  );

  return (
    <header
      className={cn(
        "sticky top-0 z-50 w-full transition-all duration-300",
        hasScrolled
          ? "border-b border-border bg-background/80 backdrop-blur-lg shadow-lg"
          : "border-b border-transparent"
      )}
    >
      <div className="container mx-auto px-4">
        <div className="grid h-20 grid-cols-3 items-center">
          {/* Left Column */}
          <div className="flex justify-start">
            <BrandLogo />
          </div>

          {/* Center Column */}
          <div className="flex justify-center">
            {/* Desktop Nav */}
            <nav className="hidden lg:flex items-center gap-8">
              {navLinks.map((link) => (
                <Link
                  key={link.label}
                  href={link.href}
                  className="text-base font-medium text-muted-foreground transition-colors hover:text-foreground link-underline"
                >
                  {link.label}
                </Link>
              ))}
            </nav>
          </div>
          
          {/* Right Column */}
          <div className="flex justify-end">
            {/* Desktop Buttons */}
            <div className="hidden lg:flex items-center gap-4">
              <Button
                variant="ghost"
                className="text-foreground font-medium rounded-full"
                asChild
              >
                <Link href="/login">Login</Link>
              </Button>
              <Button
                className="bg-primary hover:bg-primary/90 text-primary-foreground font-semibold px-6 rounded-full btn-shine"
                asChild
              >
                <Link href="/register">Sign Up</Link>
              </Button>
              <Button
                variant="outline"
                size="icon"
                className="rounded-full relative"
                asChild
              >
                <Link href="/cart">
                  <ShoppingCart className="h-5 w-5" />
                  {cartItemCount > 0 && (
                    <span className="absolute -top-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full bg-destructive text-xs font-bold text-white">
                      {cartItemCount}
                    </span>
                  )}
                </Link>
              </Button>
            </div>

            {/* Mobile Buttons */}
            <div className="lg:hidden flex items-center gap-2">
              <Button
                variant="outline"
                size="icon"
                className="rounded-full relative"
                asChild
              >
                <Link href="/cart">
                  <ShoppingCart className="h-5 w-5" />
                  {cartItemCount > 0 && (
                    <span className="absolute -top-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full bg-destructive text-xs font-bold text-white">
                      {cartItemCount}
                    </span>
                  )}
                </Link>
              </Button>
              <Sheet open={isOpen} onOpenChange={setIsOpen}>
                <SheetTrigger asChild>
                  <Button variant="outline" size="icon" className="rounded-full">
                    <Menu className="h-6 w-6" />
                    <span className="sr-only">Open menu</span>
                  </Button>
                </SheetTrigger>
                <SheetContent
                  side="right"
                  className="w-[90%] sm:max-w-sm bg-background/95 backdrop-blur-xl flex flex-col p-0 border-l border-border"
                >
                  <SheetHeader className="p-6 border-b border-border">
                    <SheetTitle asChild>
                      <Link href="/" onClick={() => setIsOpen(false)}>
                        <span className="text-2xl font-bold font-display text-primary">
                          Doritex
                        </span>
                      </Link>
                    </SheetTitle>
                    <SheetDescription className="sr-only">
                      Mobile navigation menu
                    </SheetDescription>
                  </SheetHeader>
                  <nav className="flex flex-col gap-2 text-lg p-4 flex-grow">
                    {navLinks.map((link) => (
                      <Link
                        key={link.label}
                        href={link.href}
                        className="font-semibold text-foreground/80 transition-colors hover:text-primary py-3 rounded-lg px-4 hover:bg-muted"
                        onClick={() => setIsOpen(false)}
                      >
                        {link.label}
                      </Link>
                    ))}
                  </nav>
                  <div className="mt-auto flex flex-col gap-3 p-6 border-t border-border bg-muted/30">
                    <Button
                      variant="outline"
                      size="lg"
                      className="h-12 text-base"
                      onClick={() => setIsOpen(false)}
                      asChild
                    >
                      <Link href="/login">Login</Link>
                    </Button>
                    <Button
                      size="lg"
                      className="bg-primary h-12 text-base text-primary-foreground font-bold btn-shine"
                      onClick={() => setIsOpen(false)}
                      asChild
                    >
                      <Link href="/register">Sign Up</Link>
                    </Button>
                  </div>
                </SheetContent>
              </Sheet>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
}
