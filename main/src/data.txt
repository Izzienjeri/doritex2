Of course! I understand. Large cards can definitely feel overwhelming on a smaller screen.

I've made some adjustments to reduce the size of the book cards, particularly their height, to create a more compact and scannable layout on mobile. Hereâ€™s what I did:

1.  **Adjusted Image Aspect Ratio:** I changed the aspect ratio of the book cover images from a tall `2:3` to a slightly wider `4:5`. This makes the cards shorter and feel less "big" without shrinking the text or making them too narrow.
2.  **Reduced Vertical Gaps:** I've decreased the vertical spacing between the rows of books in the grid. This tightens up the layout, making it more compact and allowing users to see more books without excessive scrolling.

Here is the complete updated code for the affected files:

### `components/shared/BookCard.tsx`
```tsx
import React from 'react';
import Image from "next/image";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Book } from "@/lib/data";
import { useCart } from "@/context/CartContext";
import { ShoppingCart, ShieldCheck, Star } from "lucide-react";
import { toast } from "sonner";
import { cn } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';

interface BookCardProps {
  book: Book;
  priority?: boolean;
}

export function BookCard({ book, priority = false }: BookCardProps) {
  const { dispatch } = useCart();

  const handleAddToCart = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    dispatch({ type: "ADD_ITEM", payload: { ...book, quantity: 1 } });
    toast.success(`${book.title} added to cart!`);
  };

  return (
    <Link href={`/books/${book.id}`} className="block group" tabIndex={0}>
      <Card className={cn(
        "flex h-full w-full flex-col overflow-hidden rounded-xl",
        "bg-card/80 backdrop-blur-sm border shadow-lg shadow-black/10",
        "transition-all duration-300 ease-in-out group-hover:shadow-2xl group-hover:shadow-primary/20 group-hover:-translate-y-2"
      )}>
        <CardHeader className="p-0 relative">
          <div className="aspect-[4/5] w-full overflow-hidden rounded-t-xl">
              <Image
                src={book.imageUrl}
                alt={book.title}
                width={300}
                height={375}
                className="object-cover w-full h-full transition-transform duration-500 group-hover:scale-105"
                priority={priority}
              />
          </div>
           {/* Badges Overlay */}
          <div className="absolute top-2 left-2 flex flex-col gap-1.5">
              <Badge className="bg-green-100/90 hover:bg-green-100 text-green-800 border border-green-200/50 text-xs font-bold shadow">
                  <ShieldCheck className="mr-1 h-3 w-3" /> KICD Approved
              </Badge>
              <Badge className="bg-yellow-100/90 hover:bg-yellow-100 text-yellow-800 border border-yellow-200/50 text-xs font-bold shadow">
                  <Star className="mr-1 h-3 w-3" /> Top Seller
              </Badge>
          </div>
        </CardHeader>
        <CardContent className="flex-grow p-3 flex flex-col bg-transparent">
          <CardTitle className="text-sm font-bold leading-snug text-foreground/90 flex-grow group-hover:text-primary transition-colors">{book.title}</CardTitle>
        </CardContent>
        <CardFooter className="flex justify-between items-center p-3 pt-1 bg-transparent">
          <p className="text-sm font-bold text-card-foreground/80 font-sans">Kshs {book.price.toFixed(2)}</p>
          <Button
            size="icon"
            className="bg-primary/90 hover:bg-primary text-primary-foreground rounded-full h-9 w-9 shrink-0"
            onClick={handleAddToCart}
            aria-label="Add to cart"
          >
            <ShoppingCart className="h-4 w-4" />
          </Button>
        </CardFooter>
      </Card>
    </Link>
  );
}
```

### `components/shared/BookGrid.tsx`
```tsx
"use client";

import { motion } from 'framer-motion';
import { BookCard } from './BookCard';
import { Book } from '@/lib/data';

export function BookGrid({ books }: { books: Book[] }) {
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { staggerChildren: 0.05 },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: { y: 0, opacity: 1 },
  };

  return (
    <motion.div
      className="inline-grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-x-4 gap-y-6 md:gap-x-6 md:gap-y-10"
      variants={containerVariants}
      initial="hidden"
      animate="visible"
      key={books.length} // Re-trigger animation when books change
    >
      {books.length > 0 ? (
        books.map((book, index) => (
          <motion.div key={book.id} variants={itemVariants}>
            <BookCard book={book} priority={index < 5} />
          </motion.div>
        ))
      ) : (
        <p className="col-span-full text-center text-lg text-muted-foreground py-10">
          No books found matching your criteria.
        </p>
      )}
    </motion.div>
  );
}
```

These changes should give you the more compact and manageable card size you're looking for, especially on mobile devices. Let me know if you have any other questions