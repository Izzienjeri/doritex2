Of course. Here is the complete, updated code for all the files affected by removing the button animations and replacing the hero background animation.

### === app/globals.css ===

The `.btn-shine` rules have been removed, and the new performant CSS wave animation has been added at the end.

```css
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-sans);
  --font-display: var(--font-display);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.75rem;

  /* A fresh, modern take on the blue and white palette */
  --background: #f7f9ff; /* A slightly cooler, airy white */
  --foreground: #1e2a78; /* A deeper, richer navy for text */

  --card: #ffffff; /* Pure white for the base of our glass effect */
  --card-foreground: #2b2b2b;

  --popover: #ffffff;
  --popover-foreground: #1e2a78;

  --primary: #00a9e8; /* A vibrant, sky blue */
  --primary-rgb: 0, 169, 232;
  --primary-foreground: #ffffff;

  --secondary: #4a7de0; /* A brighter, more energetic blue */
  --secondary-foreground: #ffffff;

  --accent: #2e3192; /* The classic, deep blue for strong accents */
  --accent-foreground: #ffffff;

  --muted: #edf2f7;
  --muted-foreground: #5a67a0;

  --destructive: hsl(0 84.2% 60.2%); 

  --border: rgba(46, 49, 146, 0.15); /* A subtle, color-matched border */
  --input: #ffffff;
  --ring: #00a9e8;
}

@layer base {
  * {
    @apply border-border;
  }
  
  body {
    @apply text-card-foreground antialiased cursor-default overflow-x-hidden;
    background-color: var(--background);
  }

  h1, h2, h3, h4, h5, h6 {
    @apply font-display uppercase tracking-wider text-balance text-foreground;
  }
  
  h1 {
    text-shadow: 0 0 60px rgba(var(--primary-rgb), 0.2);
  }
}

body::before {
  content: '';
  position: fixed;
  top: 0; left: 0; right: 0; bottom: 0;
  background-image: radial-gradient(circle at 15% 20%, rgba(var(--primary-rgb), 0.15), transparent 40%),
                    radial-gradient(circle at 85% 75%, rgba(74, 125, 224, 0.15), transparent 40%);
  z-index: -1;
  animation: float-glow 25s ease-in-out infinite;
  transform-origin: center;
}

@keyframes float-glow {
  0% { transform: translateY(0px); }
  50% { transform: translateY(-40px); }
  100% { transform: translateY(0px); }
}

#cursor-glow {
  position: fixed;
  top: 0;
  left: 0;
  width: 500px;
  height: 500px;
  border-radius: 50%;
  background: radial-gradient(circle, rgba(0, 170, 235, 0.15), transparent 60%);
  pointer-events: none;
  transform: translate(-50%, -50%);
  z-index: 9999;
  filter: blur(50px);
  transition: opacity 0.3s ease;
}

body:hover #cursor-glow {
  opacity: 1;
}

.glass-card {
  @apply bg-white/60 dark:bg-gray-900/60 backdrop-blur-xl border border-white/20 dark:border-white/10 shadow-xl shadow-black/5;
}

.perspective-container {
  perspective: 1000px;
}

.bg-dot-grid {
  background-image: radial-gradient(circle, rgba(46, 49, 146, 0.05) 1px, transparent 1px);
  background-size: 1.25rem 1.25rem;
}

.text-liquid-ink {
  @apply bg-clip-text text-transparent;
  background-image: linear-gradient(110deg, var(--secondary) 15%, var(--accent) 35%, var(--primary) 65%, var(--secondary) 85%);
  background-size: 300% 100%;
  animation: liquid-flow 8s ease-in-out infinite;
}
@keyframes liquid-flow {
  0% { background-position: 100% 50%; }
  50% { background-position: 0% 50%; }
  100% { background-position: 100% 50%; }
}

.link-underline {
  position: relative;
  display: inline-block;
}
.link-underline::after {
  content: "";
  position: absolute;
  left: 0;
  bottom: -4px;
  width: 100%;
  height: 2px;
  background-color: var(--primary);
  transform: scaleX(0);
  transform-origin: right;
  transition: transform 0.4s cubic-bezier(0.19, 1, 0.22, 1);
}
.link-underline:hover::after {
  transform: scaleX(1);
  transform-origin: left;
}

/* Performant CSS Wave Animation */
.waves-container {
  position: absolute;
  inset: 0;
  z-index: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  background-color: var(--accent); /* Fallback background */
}

.wave {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 200%;
  height: 200px;
  background-repeat: repeat-x;
  background-size: 1000px 200px;
  animation: wave-flow 15s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;
}

.wave.one {
  background-image: url("data:image/svg+xml,%3csvg width='1000' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M-10,150 C 250,50 350,250 600,150 S 900,250 1010,150' stroke='none' fill='rgba(0, 170, 235, 0.5)'%3e%3c/path%3e%3c/svg%3e");
  animation-duration: 20s;
  bottom: 10px;
  opacity: 1;
}

.wave.two {
  background-image: url("data:image/svg+xml,%3csvg width='1000' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M-10,180 C 200,100 300,280 550,180 S 850,100 1010,160' stroke='none' fill='rgba(46, 49, 146, 0.4)'%3e%3c/path%3e%3c/svg%3e");
  animation-duration: 25s;
  bottom: 0px;
  opacity: 0.8;
}

@keyframes wave-flow {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(-1000px);
  }
}
```

### === components/layout/HeroBackground.tsx ===

The entire component is replaced with this simple, performant version.

```tsx
export function HeroBackground() {
  return (
    <div className="waves-container">
      <div className="wave one"></div>
      <div className="wave two"></div>
    </div>
  );
}
```

### === app/page.tsx ===

The `btn-shine` class has been removed from the main call-to-action button.

```tsx
"use client";

import { Button } from "@/components/ui/button";
import { ArrowRight, BookOpen, Droplet, Edit } from "lucide-react";
import Link from "next/link";
import { motion, Variants } from "framer-motion";
import { HeroBackground } from "@/components/layout/HeroBackground";
import dynamic from 'next/dynamic';

const FeaturedBooks = dynamic(() => import('@/components/shared/FeaturedBooks').then(mod => mod.FeaturedBooks), {
  ssr: false,
  loading: () => <div className="h-96 w-full flex items-center justify-center"><p>Loading publications...</p></div>
});


export default function HomePage() {
  const sentence = "Gateway to Educational Excellence.".split(" ");

  const sentenceVariants: Variants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: { delay: 0.5, staggerChildren: 0.08 },
    },
  };

  const letterVariants: Variants = {
    hidden: { opacity: 0, y: 20, filter: "blur(5px)" },
    visible: { opacity: 1, y: 0, filter: "blur(0px)" },
  };

  return (
    <div className="flex flex-col">
      <section className="relative w-full min-h-screen flex flex-col items-center justify-center overflow-hidden">
        <HeroBackground />

        <div className="container relative z-10 mx-auto px-4 text-center">
          <div className="max-w-4xl mx-auto">
            <motion.h1
              className="text-5xl sm:text-7xl font-bold tracking-tighter md:text-8xl !text-white"
              style={{ textShadow: "0 4px 20px rgba(0,0,0,0.3)" }}
              variants={sentenceVariants}
              initial="hidden"
              animate="visible"
            >
              {sentence.map((word, index) => (
                <motion.span
                  key={word + "-" + index}
                  className="inline-block mr-[0.25em]"
                >
                  {word.split("").map((char, charIndex) => (
                    <motion.span
                      key={char + "-" + charIndex}
                      variants={letterVariants}
                    >
                      {char}
                    </motion.span>
                  ))}
                </motion.span>
              ))}
            </motion.h1>
            <motion.p
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{
                duration: 0.8,
                delay: 2.2,
                ease: [0.22, 1, 0.36, 1],
              }}
              className="mt-6 text-lg text-white/80 md:text-xl max-w-2xl mx-auto font-sans"
            >
              A curated collection where every page is a new discovery. Your
              journey into knowledge begins with a single drop of ink.
            </motion.p>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{
                duration: 0.8,
                delay: 2.4,
                ease: [0.22, 1, 0.36, 1],
              }}
              className="mt-10"
            >
              <Button
                size="lg"
                asChild
                className="text-primary-foreground font-bold text-base h-16 px-10 rounded-full shadow-lg shadow-primary/30 transform hover:scale-105 transition-transform duration-300"
              >
                <Link href="/books">
                  Explore The Collection{" "}
                  <ArrowRight className="ml-2 h-5 w-5" />
                </Link>
              </Button>
            </motion.div>
          </div>
        </div>
      </section>

      <FeaturedBooks />

      <section id="about" className="py-24 md:py-32 overflow-hidden relative">
        <div className="container mx-auto text-center px-4 relative">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true, amount: 0.3 }}
            transition={{ duration: 0.8 }}
          >
            <h2 className="text-4xl md:text-5xl font-bold tracking-tighter mb-6">
              The Publisher’s Mark
            </h2>
            <p className="max-w-3xl mx-auto text-lg text-card-foreground/70 leading-relaxed mb-20 font-sans">
              Our philosophy is built on three foundational marks, each
              representing our commitment to quality, creativity, and growth.
            </p>
          </motion.div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
            {[
              {
                icon: BookOpen,
                title: "Curated Canon",
                desc: "A focused curriculum, a universe of knowledge.",
              },
              {
                icon: Droplet,
                title: "Purity of Ink",
                desc: "Peer-reviewed publications that are clear and potent.",
              },
              {
                icon: Edit,
                title: "The Written Future",
                desc: "Supporting your lifelong journey of learning.",
              },
            ].map((item, i) => (
              <motion.div
                key={item.title}
                className="group p-8 rounded-2xl transition-all duration-300 border border-transparent hover:border-primary/20 hover:bg-white/50"
                initial={{ opacity: 0, scale: 0.9 }}
                whileInView={{ opacity: 1, scale: 1 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.2 + i * 0.1 }}
              >
                <div className="flex flex-col items-center gap-5">
                  <div className="flex-shrink-0 rounded-full bg-primary/10 p-4 border border-primary/20 transition-all duration-300 group-hover:bg-primary group-hover:scale-110 group-hover:shadow-lg group-hover:shadow-primary/30">
                    <item.icon className="h-10 w-10 text-primary transition-all duration-300 group-hover:text-white" />
                  </div>
                  <div>
                    <h3 className="text-xl font-bold mb-2 text-accent">
                      {item.title}
                    </h3>
                    <p className="text-sm text-card-foreground/70 font-sans leading-relaxed">
                      {item.desc}
                    </p>
                  </div>
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </section>
    </div>
  );
}
```

### === app/cart/page.tsx ===

The `btn-shine` class has been removed from both buttons.

```tsx
"use client";

import { useCart } from "@/context/CartContext";
import { Button } from "@/components/ui/button";
import Image from "next/image";
import Link from "next/link";
import { Minus, Plus, Trash2, ArrowRight } from "lucide-react";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";

export default function CartPage() {
  const { state, dispatch } = useCart();
  const { items } = state;

  const updateQuantity = (id: string, quantity: number) => {
    dispatch({ type: 'UPDATE_QUANTITY', payload: { id, quantity } });
  };
  
  const removeItem = (id: string) => {
    dispatch({ type: 'REMOVE_ITEM', payload: { id } });
  };

  const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);
  const shipping = subtotal > 0 ? 500 : 0;
  const total = subtotal + shipping;

  return (
    <div className="container mx-auto px-4 py-16 md:py-24 bg-dot-grid">
      <h1 className="text-4xl md:text-5xl font-bold tracking-tighter mb-12 text-center">Shopping Cart</h1>
      
      {items.length === 0 ? (
        <div className="text-center py-20 bg-muted rounded-lg border">
          <h2 className="text-2xl font-semibold mb-4 text-foreground">Your cart is empty.</h2>
          <p className="text-muted-foreground mb-8">
            Looks like you haven&rsquo;t added any books yet.
          </p>
          <Button asChild size="lg" className="bg-primary hover:bg-primary/90 text-primary-foreground font-bold text-base h-14 px-8 rounded-full shadow-lg shadow-primary/20">
            <Link href="/books">Explore Books</Link>
          </Button>
        </div>
      ) : (
        <div className="grid lg:grid-cols-3 gap-12">
          <div className="lg:col-span-2 space-y-6">
            {items.map(item => (
              <Card key={item.id} className="flex flex-col sm:flex-row items-start sm:items-center p-4 gap-4 bg-card/80 border">
                <Image src={item.imageUrl} alt={item.title} width={100} height={150} className="rounded-md object-cover self-center sm:self-start shrink-0" />
                <div className="flex-grow w-full">
                    <h3 className="text-lg font-bold text-foreground">{item.title}</h3>
                    <p className="text-lg font-bold text-primary mt-2">Kshs {item.price.toFixed(2)}</p>
                </div>
                <div className="flex items-center gap-4 self-stretch sm:self-center justify-end w-full sm:w-auto">
                    <div className="flex items-center border rounded-full p-1 bg-white/50">
                        <Button variant="ghost" size="icon" className="rounded-full h-8 w-8" onClick={() => updateQuantity(item.id, item.quantity - 1)}>
                            <Minus className="h-4 w-4" />
                        </Button>
                        <span className="w-8 text-center font-bold">{item.quantity}</span>
                        <Button variant="ghost" size="icon" className="rounded-full h-8 w-8" onClick={() => updateQuantity(item.id, item.quantity + 1)}>
                            <Plus className="h-4 w-4" />
                        </Button>
                    </div>
                    <Button variant="ghost" size="icon" className="text-muted-foreground hover:text-destructive" onClick={() => removeItem(item.id)}>
                        <Trash2 className="h-5 w-5" />
                    </Button>
                </div>
              </Card>
            ))}
          </div>

          <div className="lg:col-span-1">
            <Card className="bg-card/80 backdrop-blur-sm border shadow-lg sticky top-28">
              <CardHeader>
                <CardTitle className="text-2xl text-foreground">Order Summary</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4 text-lg">
                <div className="flex justify-between text-card-foreground/80"><span>Subtotal</span><span className='font-semibold text-foreground'>Kshs {subtotal.toFixed(2)}</span></div>
                <div className="flex justify-between text-card-foreground/80"><span>Shipping</span><span className='font-semibold text-foreground'>Kshs {shipping.toFixed(2)}</span></div>
                <hr className="border-border" />
                <div className="flex justify-between font-bold text-xl text-foreground"><span>Total</span><span>Kshs {total.toFixed(2)}</span></div>
              </CardContent>
              <CardFooter>
                 <Button asChild size="lg" className="w-full bg-primary hover:bg-primary/90 text-primary-foreground font-bold text-base h-14 rounded-full shadow-lg shadow-primary/20">
                    <Link href="/checkout">
                        Proceed to Checkout <ArrowRight className="ml-2 h-5 w-5" />
                    </Link>
                 </Button>
              </CardFooter>
            </Card>
          </div>
        </div>
      )}
    </div>
  );
}
```

### === app/checkout/page.tsx ===

```tsx
"use client"
import { useState } from "react";
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { useCart } from "@/context/CartContext"
import { useAuth } from "@/context/AuthContext";
import Image from "next/image"
import { useRouter } from "next/navigation"

export default function CheckoutPage() {
  const { state } = useCart();
  const { user } = useAuth();
  const router = useRouter();
  const { items } = state;

  const [deliveryMethod, setDeliveryMethod] = useState("delivery");

  const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);
  const shipping = deliveryMethod === "delivery" && subtotal > 0 ? 500.00 : 0;
  const total = subtotal + shipping;

  const handlePlaceOrder = (e: React.FormEvent) => {
    e.preventDefault();
    // Here you would trigger the M-Pesa STK Push
    // After successful payment confirmation from your backend:
    router.push('/order/confirmation');
  }

  if (items.length === 0) {
    return (
        <div className="container mx-auto px-4 py-16 md:py-24 text-center">
            <h1 className="text-4xl md:text-5xl font-bold tracking-tighter mb-4">Checkout</h1>
            <p className="text-xl text-muted-foreground">Your cart is empty. Please add books to proceed.</p>
        </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-16 md:py-24 bg-dot-grid">
      <h1 className="text-4xl md:text-5xl font-bold tracking-tighter mb-12 text-center">Checkout</h1>
      <form onSubmit={handlePlaceOrder} className="grid lg:grid-cols-3 gap-12 items-start">
        <div className="lg:col-span-2 space-y-10">
          <Card className="bg-card/80 border">
            <CardHeader><CardTitle className="text-2xl">Delivery Method</CardTitle></CardHeader>
            <CardContent>
                <RadioGroup defaultValue="delivery" onValueChange={setDeliveryMethod} className="flex flex-col sm:flex-row gap-4">
                    <Label htmlFor="delivery" className="flex items-center gap-3 border p-4 rounded-lg flex-1 cursor-pointer hover:border-primary has-[[data-state=checked]]:border-primary has-[[data-state=checked]]:bg-primary/5">
                        <RadioGroupItem value="delivery" id="delivery" />
                        <div>
                            <p className="font-semibold">Delivery</p>
                            <p className="text-sm text-muted-foreground">Shipped to your address.</p>
                        </div>
                    </Label>
                    <Label htmlFor="pickup" className="flex items-center gap-3 border p-4 rounded-lg flex-1 cursor-pointer hover:border-primary has-[[data-state=checked]]:border-primary has-[[data-state=checked]]:bg-primary/5">
                        <RadioGroupItem value="pickup" id="pickup" />
                        <div>
                            <p className="font-semibold">Pickup</p>
                            <p className="text-sm text-muted-foreground">Collect from our store.</p>
                        </div>
                    </Label>
                </RadioGroup>
            </CardContent>
          </Card>
          
          {deliveryMethod === 'delivery' && (
            <Card className="bg-card/80 border">
                <CardHeader><CardTitle className="text-2xl">Shipping Address</CardTitle></CardHeader>
                <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="col-span-full space-y-2"><Label htmlFor="name">Full Name</Label><Input id="name" defaultValue={user?.name} required /></div>
                <div className="col-span-full space-y-2"><Label htmlFor="email">Email</Label><Input id="email" type="email" defaultValue={user?.email} required /></div>
                <div className="col-span-full space-y-2"><Label htmlFor="address">Address</Label><Input id="address" required /></div>
                <div className="space-y-2"><Label htmlFor="city">City</Label><Input id="city" required /></div>
                <div className="space-y-2"><Label htmlFor="zip">ZIP Code</Label><Input id="zip" required /></div>
                </CardContent>
            </Card>
          )}

          <Card className="bg-card/80 border">
            <CardHeader><CardTitle className="text-2xl">M-Pesa Payment</CardTitle></CardHeader>
            <CardContent className="space-y-4">
                <p className="text-muted-foreground text-sm">You will receive an STK Push on your phone to complete the payment.</p>
                <div className="space-y-2">
                    <Label htmlFor="phone">M-Pesa Phone Number</Label>
                    <Input id="phone" placeholder="e.g. 0712345678" required />
                </div>
            </CardContent>
          </Card>
        </div>

        <div className="lg:col-span-1">
          <Card className="bg-card/80 border sticky top-28 shadow-lg">
            <CardHeader><CardTitle className="text-2xl">Order Summary</CardTitle></CardHeader>
            <CardContent>
              <div className="space-y-4 mb-6">
                {items.map(item => (
                  <div key={item.id} className="flex items-center justify-between text-sm">
                    <div className="flex items-center gap-3">
                        <Image src={item.imageUrl} alt={item.title} width={40} height={60} className="rounded" />
                        <div>
                            <p className="font-semibold text-foreground">{item.title}</p>
                            <p className="text-muted-foreground">Qty: {item.quantity}</p>
                        </div>
                    </div>
                    <p className="font-semibold text-foreground">Kshs {(item.price * item.quantity).toFixed(2)}</p>
                  </div>
                ))}
              </div>
              <div className="space-y-2 text-md border-t border-border pt-4">
                <div className="flex justify-between text-muted-foreground"><span>Subtotal</span><span className="font-semibold text-foreground">Kshs {subtotal.toFixed(2)}</span></div>
                <div className="flex justify-between text-muted-foreground"><span>Shipping</span><span className="font-semibold text-foreground">Kshs {shipping.toFixed(2)}</span></div>
                <div className="flex justify-between font-bold text-xl mt-2 text-foreground"><span>Total</span><span>Kshs {total.toFixed(2)}</span></div>
              </div>
               <Button type="submit" size="lg" className="w-full mt-8 bg-primary hover:bg-primary/90 text-primary-foreground font-bold text-base h-14 rounded-full shadow-lg shadow-primary/20">
                  Place Order
                </Button>
            </CardContent>
          </Card>
        </div>
      </form>
    </div>
  )
}
```

### === app/login/page.tsx ===

```tsx
"use client";
import Link from "next/link";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useAuth } from "@/context/AuthContext";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import { useState } from "react";
import { mockUsers } from "@/lib/data";
import { AlertCircle } from "lucide-react";

export default function LoginPage() {
  const { login } = useAuth();
  const router = useRouter();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(''); // State for inline error message

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault();
    setError(''); // Clear previous errors on a new attempt

    const foundUser = mockUsers.find(
      (user) => user.email === email && user.password === password
    );

    if (foundUser) {
      // Success: Log user in and show a success toast
      login({ name: foundUser.name, email: foundUser.email, isAdmin: foundUser.isAdmin });
      toast.success(`Welcome back, ${foundUser.name}!`);
      
      if (foundUser.isAdmin) {
        router.push('/admin');
      } else {
        router.push('/profile');
      }
    } else {
      // Failure: Set the inline error message instead of showing a toast
      setError("Invalid email or password. Please try again.");
      setPassword(''); // Clear password field for security
    }
  };

  return (
    <div className="min-h-[80vh] flex items-center justify-center p-4 bg-dot-grid">
      <motion.div
        className="w-full max-w-md"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, ease: "easeOut" }}
      >
        <Card className="w-full bg-card/80 backdrop-blur-sm border-white/10 shadow-2xl">
          <CardHeader className="text-center">
            <CardTitle className="text-3xl font-bold">Welcome Back</CardTitle>
            <CardDescription className="text-muted-foreground pt-2">
              Sign in to continue your journey.
              <br />
              (user: user@example.com, admin: admin@example.com. pw: pass123)
            </CardDescription>
          </CardHeader>
          <form onSubmit={handleLogin}>
            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input id="email" type="email" placeholder="you@example.com" value={email} onChange={(e) => { setEmail(e.target.value); setError(''); }} required/>
              </div>
              <div className="space-y-2">
                <Label htmlFor="password">Password</Label>
                <Input id="password" type="password" value={password} onChange={(e) => { setPassword(e.target.value); setError(''); }} required />
              </div>
            </CardContent>
            <CardFooter className="flex flex-col gap-4">
              {error && (
                <div className="w-full flex items-center gap-2 rounded-lg bg-destructive/10 p-3 text-sm font-medium text-destructive">
                  <AlertCircle className="h-4 w-4 flex-shrink-0" />
                  <p>{error}</p>
                </div>
              )}
              <Button type="submit" className="w-full h-12 bg-primary hover:bg-primary/90 text-primary-foreground font-bold">
                Login
              </Button>
              <p className="text-sm text-muted-foreground">
                Don&rsquo;t have an account?{" "}
                <Link
                  href="/register"
                  className="font-semibold text-primary hover:underline"
                >
                  Sign up
                </Link>
              </p>
            </CardFooter>
          </form>
        </Card>
      </motion.div>
    </div>
  );
}
```

### === app/register/page.tsx ===

```tsx
"use client"
import Link from "next/link"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

export default function RegisterPage() {
  return (
    <div className="min-h-[80vh] flex items-center justify-center p-4 bg-dot-grid">
      <motion.div
        className="w-full max-w-md"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, ease: "easeOut" }}
      >
        <Card className="w-full bg-card/80 backdrop-blur-sm border-white/10 shadow-2xl">
          <CardHeader className="text-center">
            <CardTitle className="text-3xl font-bold">Create Account</CardTitle>
            <CardDescription className="text-muted-foreground pt-2">
              Begin your educational journey with us.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
                <Label htmlFor="name">Full Name</Label>
                <Input id="name" placeholder="John Doe" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input id="email" type="email" placeholder="you@example.com" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input id="password" type="password" />
            </div>
          </CardContent>
          <CardFooter className="flex flex-col gap-4">
            <Button className="w-full h-12 bg-primary hover:bg-primary/90 text-primary-foreground font-bold">Create Account</Button>
            <p className="text-sm text-muted-foreground">
              Already have an account?{" "}
              <Link href="/login" className="font-semibold text-primary hover:underline">
                Login
              </Link>
            </p>
          </CardFooter>
        </Card>
      </motion.div>
    </div>
  )
}
```

### === app/order/confirmation/page.tsx ===

```tsx
"use client"
import Link from "next/link"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { CheckCircle } from "lucide-react"

export default function OrderConfirmationPage() {
  return (
    <div className="min-h-[80vh] flex items-center justify-center p-4 text-center bg-dot-grid">
      <motion.div
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.5, type: "spring" }}
        className="bg-card/80 backdrop-blur-md p-10 md:p-16 rounded-2xl border"
      >
        <motion.div initial={{ scale: 0 }} animate={{ scale: 1 }} transition={{ delay: 0.2, type: 'spring', stiffness: 200, damping: 10 }}>
          <CheckCircle className="h-20 w-20 text-primary mx-auto mb-6" />
        </motion.div>
        <h1 className="text-4xl md:text-5xl font-bold tracking-tighter mb-4">
          Thank You For Your Order!
        </h1>
        <p className="text-lg text-muted-foreground max-w-lg mx-auto mb-10">
          Your order has been placed successfully. You will receive a confirmation email shortly with the order details.
        </p>
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button asChild size="lg" className="bg-primary hover:bg-primary/90 text-primary-foreground font-bold text-base h-14 px-8 rounded-full shadow-lg shadow-primary/20">
                <Link href="/books">Continue Shopping</Link>
            </Button>
            <Button asChild variant="outline" size="lg" className="h-14 px-8 rounded-full text-base font-bold">
                <Link href="/profile/orders">View Order History</Link>
            </Button>
        </div>
      </motion.div>
    </div>
  )
}
```

### === components/shared/AddToCart.tsx ===

```tsx
"use client";

import { useState } from 'react';
import { useCart } from '@/context/CartContext';
import { Book } from '@/lib/data';
import { Button } from '@/components/ui/button';
import { Minus, Plus, ShoppingCart } from 'lucide-react';
import { toast } from 'sonner';

export function AddToCart({ book }: { book: Book }) {
  const { dispatch } = useCart();
  const [quantity, setQuantity] = useState(1);
  
  const handleAddToCart = () => {
    dispatch({ type: 'ADD_ITEM', payload: { ...book, quantity } });
    toast.success(`${quantity} x ${book.title} added to cart!`);
  }

  return (
    <div className="flex items-center gap-4 mb-8">
      <div className="flex items-center border rounded-full p-1 bg-white/50">
        <Button variant="ghost" size="icon" className="rounded-full" onClick={() => setQuantity(q => Math.max(1, q - 1))}>
          <Minus className="h-4 w-4" />
        </Button>
        <span className="w-12 text-center text-lg font-bold">{quantity}</span>
        <Button variant="ghost" size="icon" className="rounded-full" onClick={() => setQuantity(q => q + 1)}>
          <Plus className="h-4 w-4" />
        </Button>
      </div>
      <Button 
        size="lg" 
        className="flex-grow bg-primary hover:bg-primary/90 text-primary-foreground font-bold text-base h-14 rounded-full shadow-lg shadow-primary/20" 
        onClick={handleAddToCart}
      >
        <ShoppingCart className="mr-2 h-5 w-5" />
        Add to Cart
      </Button>
    </div>
  );
}
```

### === components/shared/BookFilters.tsx ===

```tsx
"use client";

import { useSearchParams, usePathname, useRouter } from 'next/navigation';
import { useDebouncedCallback } from 'use-debounce';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { Search } from 'lucide-react';
import { dummyBooks } from '@/lib/data';

const categories = ['All', ...Array.from(new Set(dummyBooks.map(b => b.category)))];

export function BookFilters() {
  const searchParams = useSearchParams();
  const pathname = usePathname();
  const { replace } = useRouter();

  const activeCategory = searchParams.get('category') || 'All';

  const handleSearch = useDebouncedCallback((term: string) => {
    const params = new URLSearchParams(searchParams);
    if (term) {
      params.set('query', term);
    } else {
      params.delete('query');
    }
    replace(`${pathname}?${params.toString()}`);
  }, 300);

  const handleCategoryChange = (category: string) => {
     const params = new URLSearchParams(searchParams);
    if (category && category !== 'All') {
      params.set('category', category);
    } else {
      params.delete('category');
    }
    replace(`${pathname}?${params.toString()}`);
  }

  return (
    <div className="space-y-10">
      <div className="relative">
        <Search className="absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground" />
        <Input 
          placeholder="Search by title or author..."
          className="pl-12 h-14 text-lg bg-card border-border focus-visible:ring-primary focus-visible:ring-offset-background rounded-full shadow-sm"
          defaultValue={searchParams.get('query')?.toString()}
          onChange={(e) => handleSearch(e.target.value)}
        />
      </div>
       <div className="flex justify-center flex-wrap gap-3">
        {categories.map(category => (
          <Button 
            key={category} 
            variant={activeCategory === category ? "default" : "outline"}
            onClick={() => handleCategoryChange(category)}
            className={cn(
              "rounded-full px-6 h-11 text-base font-semibold",
              activeCategory === category && "bg-primary text-primary-foreground"
            )}
          >
            {category}
          </Button>
        ))}
      </div>
    </div>
  )
}
```

### === components/layout/Header.tsx ===

```tsx
"use client";
import Link from "next/link";
import Image from "next/image";
import { Button } from "@/components/ui/button";
import {
  Sheet,
  SheetContent,
  SheetTrigger,
  SheetHeader,
  SheetTitle,
  SheetDescription,
  SheetClose
} from "@/components/ui/sheet";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Menu, ShoppingCart, User as UserIcon } from "lucide-react";
import { useState } from "react";
import { cn } from "@/lib/utils";
import { useCart } from "@/context/CartContext";
import { useAuth } from "@/context/AuthContext";
import { useRouter } from "next/navigation";

const navLinks = [
  { href: "/", label: "Home" },
  { href: "/books", label: "Books" },
  { href: "/#about", label: "About" },
];

export function Header() {
  const [isOpen, setIsOpen] = useState(false);
  const router = useRouter();
  const { state } = useCart();
  const { user, logout } = useAuth(); // Use auth context
  const cartItemCount = state.items.reduce(
    (sum, item) => sum + item.quantity,
    0
  );
  
  const handleLogout = () => {
    logout();
    router.push('/');
  }

  const BrandLogo = () => (
    <Link href="/" className="flex items-center" onClick={() => isOpen && setIsOpen(false)}>
      <Image
        src="/logo2.png"
        alt="Doritex Logo"
        width={160}
        height={45}
        priority
        className="h-11 w-auto"
      />
    </Link>
  );

  return (
    <header
      className={cn(
        "sticky top-0 z-50 w-full border-b bg-background/80 backdrop-blur-xl shadow-sm"
      )}
    >
      <div className="container mx-auto px-4">
        <div className="relative flex h-20 items-center justify-between">
          <div className="flex-shrink-0">
            <BrandLogo />
          </div>

          <nav className="hidden lg:flex absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 items-center gap-8">
            {navLinks.map((link) => (
              <Link
                key={link.label}
                href={link.href}
                className="text-base font-medium text-foreground/70 transition-colors hover:text-foreground link-underline"
              >
                {link.label}
              </Link>
            ))}
          </nav>
          
          <div className="flex items-center gap-4">
            <div className="hidden lg:flex items-center gap-2">
              {user ? (
                 <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="outline" className="rounded-full font-medium flex items-center gap-2">
                        <UserIcon className="h-4 w-4"/>
                        My Account
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end" className="w-56">
                      <DropdownMenuLabel>Hi, {user.name}!</DropdownMenuLabel>
                      <DropdownMenuSeparator />
                      <DropdownMenuItem asChild><Link href="/profile">My Profile</Link></DropdownMenuItem>
                      <DropdownMenuItem asChild><Link href="/profile/orders">Order History</Link></DropdownMenuItem>
                      {user.isAdmin && (
                        <>
                          <DropdownMenuSeparator />
                          <DropdownMenuItem asChild><Link href="/admin">Admin Dashboard</Link></DropdownMenuItem>
                        </>
                      )}
                      <DropdownMenuSeparator />
                      <DropdownMenuItem onClick={handleLogout} className="text-destructive cursor-pointer">
                        Logout
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
              ) : (
                <>
                  <Button variant="ghost" className="font-medium rounded-full" asChild>
                    <Link href="/login">Login</Link>
                  </Button>
                  <Button className="bg-primary hover:bg-primary/90 text-primary-foreground font-semibold px-6 rounded-full shadow-lg shadow-primary/20" asChild>
                    <Link href="/register">Sign Up</Link>
                  </Button>
                </>
              )}
            </div>

            <Button variant="outline" size="icon" className="rounded-full relative flex-shrink-0 bg-white/50" asChild>
              <Link href="/cart">
                <ShoppingCart className="h-5 w-5" />
                {cartItemCount > 0 && (
                  <span className="absolute -top-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full bg-destructive text-xs font-bold text-white">
                    {cartItemCount}
                  </span>
                )}
                <span className="sr-only">Shopping Cart</span>
              </Link>
            </Button>
            
            <div className="lg:hidden">
              <Sheet open={isOpen} onOpenChange={setIsOpen}>
                <SheetTrigger asChild>
                  <Button variant="outline" size="icon" className="rounded-full bg-white/50">
                    <Menu className="h-6 w-6" />
                    <span className="sr-only">Open menu</span>
                  </Button>
                </SheetTrigger>
                <SheetContent side="right" className="w-[90%] sm:max-w-sm bg-background/95 backdrop-blur-xl flex flex-col p-0">
                  <SheetHeader className="p-6 border-b">
                    <SheetTitle asChild><Link href="/" onClick={() => setIsOpen(false)}><Image src="/logo2.png" alt="Doritex Logo" width={160} height={45} className="h-11 w-auto" /></Link></SheetTitle>
                    <SheetDescription className="sr-only">Mobile navigation menu</SheetDescription>
                  </SheetHeader>
                  <nav className="flex flex-col gap-2 text-lg p-4 flex-grow">
                    {navLinks.map((link) => (
                      <SheetClose asChild key={link.label}>
                        <Link href={link.href} className="font-semibold text-foreground/80 transition-colors hover:text-primary py-3 rounded-lg px-4 hover:bg-muted">
                            {link.label}
                        </Link>
                      </SheetClose>
                    ))}
                     {user && (
                        <SheetClose asChild>
                         <Link href="/profile" className="font-semibold text-foreground/80 transition-colors hover:text-primary py-3 rounded-lg px-4 hover:bg-muted">My Account</Link>
                        </SheetClose>
                     )}
                  </nav>
                  <div className="mt-auto flex flex-col gap-3 p-6 border-t bg-muted/30">
                    {user ? (
                        <Button variant="destructive" size="lg" className="h-12 text-base" onClick={() => { handleLogout(); setIsOpen(false); }}>Logout</Button>
                    ) : (
                        <>
                            <SheetClose asChild><Button asChild variant="outline" size="lg" className="h-12 text-base"><Link href="/login">Login</Link></Button></SheetClose>
                            <SheetClose asChild><Button asChild size="lg" className="bg-primary h-12 text-base text-primary-foreground font-bold"><Link href="/register">Sign Up</Link></Button></SheetClose>
                        </>
                    )}
                  </div>
                </SheetContent>
              </Sheet>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
}
```